using Mutagen.Bethesda;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;

namespace SynArmorAAFixMissingGenderWorldModel
{
    public class Program
    {
        static Lazy<PatcherSettings> Settings = null!;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings("PatcherSettings", "settings.json", out Settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "YourPatcher.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            // check custom armors list
            if (Settings.Value.ArmorTemplates.Count == 0)
            {
                Console.WriteLine($"Armor addons are not set. Exit..");
                return;
            }
            // check custom armors data and add only valid else show info
            int templateIndex = -1;
            var armorTemplate = new List<ArmorTemplate>();
            var addedKeywords = new HashSet<IKeywordGetter>();
            foreach (var customTemplate in Settings.Value.ArmorTemplates)
            {
                templateIndex++;

                // check valid of main properties
                if (customTemplate==null)
                {
                    Console.WriteLine($"Template #{templateIndex} is null.");
                    continue;
                }
                if (customTemplate.Keyword == null)
                {
                    Console.WriteLine($"Template #{templateIndex} has null keyword.");
                    continue;
                }
                if (!customTemplate.Keyword.TryResolve(state.LinkCache, out var keywordGetter))
                {
                    Console.WriteLine($"Template #{templateIndex} has invalid keyword.");
                    continue;
                }
                if (addedKeywords.Contains(keywordGetter))
                {
                    Console.WriteLine($"{nameof(addedKeywords)} already have added record with keyword '{keywordGetter}'.");
                    continue;
                }
                if (customTemplate.SlotArmorAddonList==null)
                {
                    Console.WriteLine($"Template #{templateIndex}|'{keywordGetter}' has null armor slotlists.");
                    continue;
                }

                // check armor addons validness
                int AAIndex = -1;
                bool isAdd = true;
                foreach(var customAA in customTemplate.SlotArmorAddonList.Values)
                {
                    AAIndex++;

                    if (customAA == null || customAA.FormKey.IsNull) continue; // ignore not set formkey for AA biped slot

                    if (!customAA.TryResolve(state.LinkCache, out var customAAGetter))
                    {
                        Console.WriteLine($"Armor addon #{AAIndex} for template keyword {keywordGetter} failed to get AAGetter.");
                        isAdd = false;
                        continue;
                    }

                    if (customAAGetter.WorldModel==null)
                    {
                        Console.WriteLine($"Armor addon #{AAIndex} for template keyword {keywordGetter} has Null World model data.");
                        isAdd = false;
                        continue;
                    }

                    if (customAAGetter.WorldModel.Female==null)
                    {
                        Console.WriteLine($"Armor addon #{AAIndex} for template keyword {keywordGetter} has Null Female world model data.");
                        isAdd = false;
                        continue;
                    }

                    if (string.IsNullOrWhiteSpace(customAAGetter.WorldModel.Female.File))
                    {
                        Console.WriteLine($"Armor addon #{AAIndex} for template keyword {keywordGetter} has Null or Empty Female world model File path.");
                        isAdd = false;
                        continue;
                    }

                    if (customAAGetter.WorldModel.Male==null)
                    {
                        Console.WriteLine($"Armor addon #{AAIndex} for template keyword {keywordGetter} has Null Male world model data.");
                        isAdd = false;
                        continue;
                    }

                    if (string.IsNullOrWhiteSpace(customAAGetter.WorldModel.Male.File))
                    {
                        Console.WriteLine($"Armor addon #{AAIndex} for template keyword {keywordGetter} has Null or Empty Male world model File path.");
                        isAdd = false;
                        continue;
                    }
                }

                addedKeywords.Add(keywordGetter);
                if (isAdd) armorTemplate.Add(customTemplate);
            }

            // check custom armors list after check data
            if (armorTemplate.Count == 0)
            {
                Console.WriteLine($"Armor addons after check data is empty. Exit..");
                return;
            }

            bool isIgnoreMods = Settings.Value.IgnoreMods.Count > 0;
            var ignoreModsList = Settings.Value.IgnoreMods;

            FormKey defaultRaceFormKey = FormKey.Factory("000019:Skyrim.esm");

            // iterate armors
            foreach (var armorGetterContext in state.LoadOrder.PriorityOrder.Armor().WinningContextOverrides())
            {
                if (isIgnoreMods && ignoreModsList.Contains(armorGetterContext.ModKey)) continue;

                var armorGetter = armorGetterContext.Record;
                // skip invalid
                if (armorGetter == null) continue;
                if (armorGetter.MajorFlags.HasFlag(Armor.MajorFlag.NonPlayable)) continue;
                if (armorGetter.MajorFlags.HasFlag(Armor.MajorFlag.Shield)) continue;
                if (armorGetter.Keywords == null) continue;
                if (armorGetter.BodyTemplate == null) continue;
                if (armorGetter.BodyTemplate.Flags.HasFlag(BodyTemplate.Flag.NonPlayable)) continue;

                var armorTemplateData = armorTemplate.FirstOrDefault(t => armorGetter.Keywords.Contains(t.Keyword) && t.SlotArmorAddonList != null);
                if (armorTemplateData == null) continue;

                foreach (var aaFormlinkGetter in armorGetter.Armature)
                {
                    if (!aaFormlinkGetter.TryResolve(state.LinkCache, out var aa) || aa == null) continue;
                    if (string.IsNullOrWhiteSpace(aa.EditorID)) continue;
                    if (aa.BodyTemplate == null) continue;
                    if (aa.WorldModel == null) continue;
                    if (aa.Race.FormKey != defaultRaceFormKey) continue;

                    if (aa.WorldModel.Female != null
                        && aa.WorldModel.Male != null
                        && !string.IsNullOrWhiteSpace(aa.WorldModel.Female.File)
                        && !string.IsNullOrWhiteSpace(aa.WorldModel.Male.File)
                            ) continue;

                    KeyValuePair<BipedObjectFlag, FormLink<IArmorAddonGetter>> slotTemplateAAData = new KeyValuePair<BipedObjectFlag, FormLink<IArmorAddonGetter>>();
                    try
                    {
                        slotTemplateAAData = armorTemplateData.SlotArmorAddonList!.First(f => f.Value != null && !f.Value.FormKey.IsNull && aa.BodyTemplate.FirstPersonFlags.HasFlag(f.Key)); // ignore slots with not set formkeys
                    }
                    catch (InvalidOperationException)
                    {
                        continue;
                    }

                    try
                    {
                        if (!slotTemplateAAData.Value.TryResolve(state.LinkCache, out var templateArmorAddonGetter)) continue; // templateAA is not resolved

                        var aanew = state.PatchMod.ArmorAddons.GetOrAddAsOverride(aa);
                        if (aanew.WorldModel!.Male == null || string.IsNullOrWhiteSpace(aanew.WorldModel.Male!.File))
                        {
                            Console.WriteLine($"Add male path to '{aanew.EditorID}|{aanew.FormKey.ID}' from '{templateArmorAddonGetter.EditorID}|{templateArmorAddonGetter.FormKey.ID}'");

                            aanew.WorldModel.Male = aanew.EditorID!.Contains("hair", StringComparison.InvariantCultureIgnoreCase) && aanew.WorldModel.Female != null && !string.IsNullOrWhiteSpace(aanew.WorldModel.Female.File) ? aanew.WorldModel.Female : new Model() { File = templateArmorAddonGetter.WorldModel!.Male!.File };
                        }
                        if (aanew.WorldModel.Female == null || string.IsNullOrWhiteSpace(aanew.WorldModel.Female!.File))
                        {
                            Console.WriteLine($"Add female path to '{aanew.EditorID}|{aanew.FormKey.ID}' from '{templateArmorAddonGetter.EditorID}|{templateArmorAddonGetter.FormKey.ID}'");

                            aanew.WorldModel.Female = aanew.EditorID!.Contains("hair", StringComparison.InvariantCultureIgnoreCase) && aanew.WorldModel.Male != null && !string.IsNullOrWhiteSpace(aanew.WorldModel.Male.File) ? aanew.WorldModel.Male : new Model() { File = templateArmorAddonGetter.WorldModel!.Female!.File };
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"An error occured. Target AA'{aa.EditorID}|{aa.FormKey.ID}', template AA:'{slotTemplateAAData.Value.FormKey}'. Error: {ex.Message}");
                    }
                }
            }
        }
    }
}
